// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth_queries.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const assignUserRole = `-- name: AssignUserRole :one
INSERT INTO user_roles (user_id, role)
VALUES ($1, $2)
RETURNING id, user_id, role, created_at, updated_at
`

type AssignUserRoleParams struct {
	UserID uuid.UUID `json:"user_id"`
	Role   string    `json:"role"`
}

func (q *Queries) AssignUserRole(ctx context.Context, arg AssignUserRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, assignUserRole, arg.UserID, arg.Role)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateTenant(ctx context.Context, name string) (Tenant, error) {
	row := q.db.QueryRow(ctx, createTenant, name)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (tenant_id, email, hashed_password)
VALUES ($1, $2, $3)
RETURNING id, tenant_id, email, created_at, updated_at
`

type CreateUserParams struct {
	TenantID       uuid.UUID `json:"tenant_id"`
	Email          string    `json:"email"`
	HashedPassword string    `json:"hashed_password"`
}

type CreateUserRow struct {
	ID        uuid.UUID `json:"id"`
	TenantID  uuid.UUID `json:"tenant_id"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.TenantID, arg.Email, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenantByID = `-- name: GetTenantByID :one
SELECT id, name, created_at, updated_at
FROM tenants
WHERE id = $1
`

func (q *Queries) GetTenantByID(ctx context.Context, id uuid.UUID) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenantByID, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenantByName = `-- name: GetTenantByName :one
SELECT id, name, created_at, updated_at
FROM tenants
WHERE name = $1
`

func (q *Queries) GetTenantByName(ctx context.Context, name string) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenantByName, name)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, tenant_id, email, hashed_password, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT id, user_id, role, created_at, updated_at
FROM user_roles
WHERE user_id = $1
`

func (q *Queries) GetUserRoles(ctx context.Context, userID uuid.UUID) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, getUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRole
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
